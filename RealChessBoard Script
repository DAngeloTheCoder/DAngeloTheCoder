using UnityEngine;
using System;
// THE REAL ONE!

public class RealChessBoard : MonoBehaviour


{
    [Header("Art Stuff")]
    [SerializeField] private Material tileMaterial;
   

   //Logic
    private const int TILE_COUNT_X = 8;
    private const int TILE_COUNT_Y = 8;
    private GameObject[,] tiles;
    private Camera currentCamera;
    private Vector2Int currentHover;
   

//Generate The Board
    private void Awake()
    {
        GenerateAllTiles (1, TILE_COUNT_X, TILE_COUNT_Y);
    }
private void Update()
{
        if (!currentCamera)
        {
            currentCamera = Camera.main;
            return;
        }

        RaycastHit info;
        Ray ray = currentCamera.ScreenPointToRay(Input.mousePosition);
        if (Physics.Raycast(ray, out info, 100, LayerMask.GetMask("tiles", "Hover")))
        {
            //Finds Indexes or x and y of tiles
            Vector2Int hitPosition = FindTIndex(info.transform.gameObject);
                
            //If hovering on new tile 
            if(currentHover == -Vector2Int.one)
            {
                currentHover = hitPosition;
                tiles[hitPosition.x, hitPosition.y].layer = LayerMask.NameToLayer("Hover");
            }

            //If hovering on new tile after old tile 
            if(currentHover != hitPosition)
            {   
                tiles[hitPosition.x, hitPosition.y].layer = LayerMask.NameToLayer("tiles");
                currentHover = hitPosition;
                tiles[hitPosition.x, hitPosition.y].layer = LayerMask.NameToLayer("Hover");
            }
        }
            else
        {
            if(currentHover != -Vector2Int.one)
            {
                tiles[hitPosition.x , hitPosition.y].layer = LayerMask.NameToLayer("tiles");
                currentHover = -Vector2Int.one;
            }
        }
    }



    // Generate The Board
    private void GenerateAllTiles(float tileSize, int tileCountX, int tileCountY)
    
    {
        tiles =new GameObject[tileCountX,tileCountY];
        for (int x = 0; x < tileCountX; x++)
            for (int y = 0; y < tileCountY; y++)
                tiles[x,y] = GenerateSingleTile(tileSize, x ,y );
    }

    private GameObject GenerateSingleTile(float tileSize , int x, int y)
    {
        GameObject tileObject = new GameObject(string.Format("X:{0}, Y:{1}" ,x ,y));
        tileObject.transform.parent = transform;

        Mesh mesh = new Mesh();
        tileObject.AddComponent<MeshFilter>().mesh = mesh;
        tileObject.AddComponent<MeshRenderer>().material=tileMaterial;

        Vector3[] vertices = new Vector3[4];
        vertices[0] = new Vector3(x*tileSize, 0, y*tileSize);
        vertices[1] = new Vector3(x*tileSize, 0, (y+1)*tileSize);
        vertices[2] = new Vector3((x+1)*tileSize, 0, y*tileSize);
        vertices[3] = new Vector3((x+1)*tileSize, 0, (y+1)*tileSize);

        int[] tris = new int[] {0, 1, 2, 1, 3, 2};

        mesh.vertices = vertices;
        mesh.triangles = tris;
        mesh.RecalculateNormals();
           
        tileObject.layer = LayerMask.NameToLayer("tiles");
        tileObject.AddComponent<BoxCollider>();

            
        
        return tileObject;
   
    }

    
    //Operation
    private Vector2Int FindTIndex(GameObject hitInfo)
    {
        for(int x=0; x<TILE_COUNT_X; x++)
            for(int y=0; y<TILE_COUNT_Y; y++)
                if(tiles[x,y]==hitInfo)
                    return new Vector2Int(x,y);
        
        return -Vector2Int.one;
    }   
}
